#!/usr/bin/env node
const { Server } = require('socket.io');

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('prueba3:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: 'http://localhost:5173',
    methods: ['GET', 'POST']
  }
});

var users = 0;
var usuarios = [];
var room;
class User {
  constructor(id, nick, avatar) {
      this.id = id;
      this.nick = nick;
      this.avatar = avatar;
      this.room = null;
  }
}

io.on('connection', (socket) => {

  socket.on('nick', (nick, avatar) => {
    const user = new User(socket.id, nick, avatar);
    usuarios.push(user);
    users++;
    io.emit('entradausuarios', nick + ' se ha conectado');
    console.log("El usuario " + nick + " se ha conectado");
    io.emit("usuarios", usuarios);
    console.log(usuarios);
  });

  socket.on('disconnect', () => {
    users--;
    let user = usuarios.find(usuario => usuario.id === socket.id);
    usuarios = usuarios.filter(usuario => usuario.id !== socket.id);
    if (user) {
      io.emit('salidausuarios', user.nick + ' se ha desconectado');
    } else {
      io.emit('salidausuarios', 'Un usuario se ha desconectado');
    }
    io.emit("usuarios", usuarios);
  });

  
  socket.on('avatar', (avatar) => {
    socket.avatar = avatar;
    console.log("El usuario " + socket.nick + " ha cambiado su avatar a " + avatar );
    socket.broadcast.emit('avatar', avatar);
  });

  socket.on('mensaje', (msg) => {
    let user = usuarios.find(usuario => usuario.id === socket.id);
    if (user) {
      datosAEnviar = {
        nick: user.nick,
        avatar: user.avatar,
        mensaje: msg,
        archivo: user.archivo,
        hora: new Date().toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' })
      }
      console.log(datosAEnviar);
      socket.broadcast.emit('mensaje', datosAEnviar);
    }
  });

  socket.on('archivoCompartido', (datos) => { 
    if (!datos.mensaje) {
      socket.emit('error', 'No files were uploaded.');
      return;
    }
    uploadPath = __dirname + '/public/archivosComp/' + datos.mensaje;
    console.log(datos.mensaje);
    socket.broadcast.emit('archivoCompartido', datos);
  });

  socket.on('escribiendo', (nick) => {
    socket.broadcast.emit('escribiendo', nick);
  });

  socket.on("entrarRoom", (room) => {
    socket.join(room);
    let user = usuarios.find(usuario => usuario.id === socket.id);
    if (user) {
      user.room = room;
      io.emit("mensajeEnRoom", room);
      console.log("Usuario " + user.nick + " ha entrado en la sala " + room);
    }
  });
  
  socket.on("mensajeEnRoom", (datos) => {
    let user = usuarios.find(usuario => usuario.id === socket.id);
    if (user && user.room) {
      datos = {
        nick: user.nick,
        avatar: user.avatar,
        mensaje: datos.mensaje,
        archivo: datos.archivo,
        hora: new Date().toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' }),
        room: user.room

      }
      user.room = datos.room;
      console.log("Mensaje enviado en la sala " + datos.room + ": ", datos);
      socket.to(datos.room).emit("mensajeEnRoom", datos);
    }
  });

  socket.on("mensajePrivado", ({ receptorID, mensaje }) => {
    const emisor = usuarios.find((usuario) => usuario.id === socket.id);
    const receptor = usuarios.find((usuario) => usuario.id === receptorID);

    let salas = [];
    socket.rooms.forEach(room => {
      salas.push(room);
    });
    datos = {
      receptor: receptor,
      emisor: socket.id,
      nick: socket.nick,
      avatar: socket.avatar,
      mensaje: mensaje,
      salas: salas,
      hora: new Date().toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' })
    }
    
    if (emisor && receptor) {
      io.to(receptorID).emit("mensajePrivado", datos);
    }

  });

});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
